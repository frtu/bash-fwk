echo "=== Loading Ubuntu ==="

# Add Node repo URL
export NODE_URL_PREFIX="deb"
export EXEC="sudo -E bash -"

inst_exfat() {
  inst exfat-fuse exfat-utils
}
inst_rar() {
  inst unrar
}

inst_ios() {
  aptrepo martin-salbaba/ppa+libimobiledevice
  inst libimobiledevice-utils ifuse
}
inst_android() {
  inst mtpfs mtp-tools
  sudo add-apt-repository ppa:samoilov-lex/aftl-stable
  sudo apt-get update && sudo apt install android-file-transfer
}
inst_wine() {
  # FOLOW : https://www.how2shout.com/linux/how-to-install-wechat-client-on-ubuntu-linux/
  sudo dpkg --add-architecture i386
  wget -O - https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add -
  sudo add-apt-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ focal main'
  sudo apt update
  sudo apt install --install-recommends winehq-stable
}

inst_docker() {
  # FOLOW : https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce
  apt install -y apt-transport-https ca-certificates curl software-properties-common
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  sudo apt-key fingerprint 0EBFCD88
  sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  apt update
  apt install -y docker-ce
  sudo docker run hello-world
  sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
  sudo chmod +x /usr/local/bin/docker-compose
  
  dck
}
inst_minikube_standalone() {
  echo "Install Docker to allow K8S to work on standalone"
  echo "-------------------------------------------------"
  inst_docker

  echo "Install Minikube"
  echo "-------------------------------------------------"
  sudo apt-get update && sudo apt-get install -y apt-transport-https
  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
  echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
  sudo apt-get update
  sudo apt-get install -y kubectl

  curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube
  sudo mkdir -p /usr/local/bin/
  sudo install minikube /usr/local/bin/

  kmloadpersist minikube --vm-driver=none
}

inst_java() {
  inst default-jdk
  inst_maven
}
inst_rust() {
  upd
  inst libssl-dev libudev-dev pkg-config zlib1g-dev llvm clang make
}

inst_clean() {
  echo "sudo apt-get clean"
  sudo apt-get clean
  echo "sudo apt-get autoremove"
  sudo apt-get autoremove
}

# apt add PPA repo - Personal Package Archives
aptrepo() {
  usage $# "PPA_NAME"
  ## Display Usage and exit if insufficient parameters. Parameters prefix with [ are OPTIONAL.
  if [[ "$?" -ne 0 ]]; then return 1; fi

  local PPA_NAME=$1
  echo "sudo add-apt-repository -y ppa:${PPA_NAME}"
  sudo add-apt-repository -y ppa:${PPA_NAME}

  upd
}

inst_stacer() {
  aptrepo oguzhaninan/stacer
  inst stacer
}
inst_aptfast() {
  aptrepo apt-fast/stable
  inst apt-fast
}
# https://itsfoss.com/lightweight-alternative-applications-ubuntu/ : https://www.appgrid.org/
inst_appgrid() {
  aptrepo appgrid/stable
  inst appgrid
}
# Add indicator : https://itsfoss.com/best-indicator-applets-ubuntu/
inst_wheather() {
  inst indicator-weather
}
inst_tlp() {
  aptrepo linrunner/tlp
  inst tlp tlp-rdw
  sudo tlp start
}
inst_cpufreq() {
  inst indicator-cpufreq
}
inst_multiload() {
  inst indicator-multiload
}
inst_netspeed() {
  aptrepo fixnix/netspeed
  inst indicator-netspeed-unity
}
inst_diskman() {
  aptrepo teejee2008/ppa
  inst indicator-diskman
}
inst_inxi() {
  inst inxi
}
# RAM Optimizer
inst_preload() {
  inst preload
}

# https://linoxide.com/linux-how-to/few-command-helps-to-get-linux-hardware-details/
hdcpu() {
  echo "sudo lscpu ${OPTIONAL_ARGS}"
  sudo lscpu ${OPTIONAL_ARGS}
}
hdmemory() {
  hd memory
}
hdnetwork() {
  hd network
}
hdstorage() {
  hd disk storage
}
hdgraphics() {
  inst_inxi
  inxi -G
}
hdsound() {
  inst_inxi
  inxi -A
}
hdbattery() {
  inst_inxi
  inxi -B
}
hd() {
  usage $# "[HARDWARE_TYPE]" "[HARDWARE_TYPE]"
  ## Display Usage and exit if insufficient parameters. Parameters prefix with [ are OPTIONAL.
  if [[ "$?" -ne 0 ]]; then return 1; fi

  local OPTIONAL_ARGS=""
  for ARG in "${@:1}"; do
    OPTIONAL_ARGS="${OPTIONAL_ARGS} -class ${ARG}"
  done

  echo "sudo lshw ${OPTIONAL_ARGS}"
  sudo lshw ${OPTIONAL_ARGS}
}
instgraphics() {
  sudo ubuntu-drivers devices
  inst nvidia-340 nvidia-modprobe
}

# System metrics
mem() {
  echo "free -m"
  free -m
}

# Services
srvps() {
  echo "service --status-all"
  service --status-all
}
srvstop() {
  usage $# "SERVICE_NAME"
  ## Display Usage and exit if insufficient parameters. Parameters prefix with [ are OPTIONAL.
  if [[ "$?" -ne 0 ]]; then 
    echo "If you don't know any names run 'srvps' and look at the last column NAMES" >&2
    srvps
    return -1
  fi

  local SERVICE_NAME=$1
  sudo service ${SERVICE_NAME} stop
}
srvrm() {
  usage $# "SERVICE_NAME"
  ## Display Usage and exit if insufficient parameters. Parameters prefix with [ are OPTIONAL.
  if [[ "$?" -ne 0 ]]; then 
    echo "If you don't know any names run 'srvps' and look at the last column NAMES" >&2
    srvps
    return -1
  fi

  local SERVICE_NAME=$1
  uninst ${SERVICE_NAME}
}

syslangen() {
  export LC_ALL=C
}
syslangunset() {
  unset LC_ALL
}
sysupg() {
  sudo do-release-upgrade
}
sysupgchk() {
  sudo do-release-upgrade -c
}